datasource db {
  provider = "sqlite"  // Ou outro banco de dados, como PostgreSQL, MySQL, etc.
  url      = env("DATABASE_URL")  // Carrega a URL do banco de dados a partir de variáveis de ambiente
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int              @id @default(autoincrement())
  name        String
  email       String           @unique
  password    String
  date        DateTime         @default(now())
  messages    Message[]
  carrinho    Carrinho[]
  editedHistories MessageHistory[] @relation("UserEditedHistories")
  pedidos     Pedido[]
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  date      DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  produtoId Int       // Chave estrangeira para Produto
  produto   Produto   @relation(fields: [produtoId], references: [id])
  messageHistories MessageHistory[] @relation("OriginalMessageHistory") // Relação com MessageHistory
}

model Produto {
  id        Int       @id @default(autoincrement())
  nome      String
  descricao String
  preco     Float
  imagem    String
  criadoEm  DateTime  @default(now())
  carrinho  Carrinho[]
  messages  Message[] // Relacionamento inverso com Message
  itensPedido ItemPedido[]
}

model Carrinho {
  id         Int      @id @default(autoincrement())
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  Int
  quantidade Int
}

model MessageHistory {
  id           Int       @id @default(autoincrement())
  originalId   Int
  content      String
  action       String
  editedById   Int
  editedAt     DateTime  @default(now())
  original     Message   @relation("OriginalMessageHistory", fields: [originalId], references: [id])
  editedBy     User      @relation("UserEditedHistories", fields: [editedById], references: [id])
}

model Pedido {
  id          Int         @id @default(autoincrement())
  usuario     User        @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  itens       ItemPedido[]
  total       Float
  status      String      @default("pendente")
  createdAt   DateTime    @default(now())
}

model ItemPedido {
  id          Int     @id @default(autoincrement())
  pedido      Pedido  @relation(fields: [pedidoId], references: [id])
  pedidoId    Int
  produto     Produto @relation(fields: [produtoId], references: [id])
  produtoId   Int
  quantidade  Int
  precoUnitario Float
}